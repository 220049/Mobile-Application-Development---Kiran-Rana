Object-Oriented Programming (OOP) is a programming paradigm that revolves 
around the concept of objects, which encapsulate data and behavior. 
There are four main pillars of OOP:

Encapsulation: Encapsulation refers to the bundling of data (attributes) and methods (functions) 
that operate on the data into a single unit or class.This protects the data from outside interference 
and misuse.

Abstraction: Abstraction refers to hiding the complex implementation details and 
showing only the necessary features of an object. It allows the programmer to focus on what the 
object does rather than how it does it.

Inheritance: Inheritance allows a class (subclass) to inherit attributes and methods from another 
class (superclass). It promotes code reusability and allows for the creation of hierarchical 
relationships between classes.

Polymorphism: Polymorphism allows objects of different classes to be treated as objects of a common 
superclass. It allows methods to be overridden in subclasses, providing different implementations
 while still maintaining a consistent interface.

# Mobile-Application-Development---Kiran-Rana
Object-Oriented Programming (OOP) is a programming paradigm that revolves around the concept of objects. These objects encapsulate data and behavior and interact with each other through well-defined interfaces. OOP is based on four main pillars, which are:

Encapsulation: Encapsulation refers to the bundling of data and methods that operate on the data into a single unit or class. The internal state of an object is hidden from the outside world, and only specific methods, known as accessors and mutators, are provided to access or modify that state. Encapsulation helps in achieving data hiding, abstraction, and modularity, making code more manageable and secure. 
---- hide data (private) like we hide our private through clothes or in bags.

Inheritance: Inheritance is a mechanism by which a new class (derived class or subclass) is created from an existing class (base class or superclass), inheriting its attributes and methods. The subclass can extend or modify the behavior of the superclass and also add new functionalities. Inheritance promotes code reuse, as common attributes and methods can be defined in a superclass and shared by multiple subclasses. 
---- inheritence from parents -- parents house is my house ,,but my house is not parent's house.

Polymorphism: Polymorphism allows objects of different classes to be treated as objects of a common superclass. It enables a single interface to represent different underlying forms (data types or classes). There are two types of polymorphism: compile-time polymorphism (achieved through method overloading and operator overloading) and runtime polymorphism (achieved through method overriding and dynamic binding). Polymorphism enhances flexibility, extensibility, and maintainability of code.  
---- different behaviours or avatar eg i am a student at college, i am a son at home, i am a friend outside

Abstraction: Abstraction involves simplifying complex systems by modeling classes appropriate to the problem domain, focusing on essential properties while suppressing unnecessary details. It allows programmers to create models that capture the essential characteristics of real-world entities. Abstraction hides the implementation details and provides a clear and concise interface for interacting with objects. By using abstraction, developers can manage complexity, enhance code readability, and facilitate code maintenance.
---- hide process/ implementation

